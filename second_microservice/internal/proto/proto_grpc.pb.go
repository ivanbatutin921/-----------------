// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_OutputUser_FullMethodName = "/proto.UserService/OutputUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	OutputUser(ctx context.Context, opts ...grpc.CallOption) (UserService_OutputUserClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) OutputUser(ctx context.Context, opts ...grpc.CallOption) (UserService_OutputUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_OutputUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceOutputUserClient{stream}
	return x, nil
}

type UserService_OutputUserClient interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceOutputUserClient struct {
	grpc.ClientStream
}

func (x *userServiceOutputUserClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceOutputUserClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	OutputUser(UserService_OutputUserServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) OutputUser(UserService_OutputUserServer) error {
	return status.Errorf(codes.Unimplemented, "method OutputUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_OutputUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).OutputUser(&userServiceOutputUserServer{stream})
}

type UserService_OutputUserServer interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ServerStream
}

type userServiceOutputUserServer struct {
	grpc.ServerStream
}

func (x *userServiceOutputUserServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceOutputUserServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OutputUser",
			Handler:       _UserService_OutputUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto.proto",
}
